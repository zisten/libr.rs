// automatically generated by rust-bindgen

pub use super::rs::*;
pub use super::complex::*;

extern "C" {
    pub fn dasum_(
        n: *const ::libc::c_int,
        dx: *const ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ::libc::c_double;
    pub fn daxpy_(
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        dx: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        dy: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
    ) -> ();
    pub fn dcopy_(
        n: *const ::libc::c_int,
        dx: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        dy: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
    ) -> ();
    pub fn ddot_(
        n: *const ::libc::c_int,
        dx: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        dy: *const ::libc::c_double,
        incy: *const ::libc::c_int,
    ) -> ::libc::c_double;
    pub fn dnrm2_(
        n: *const ::libc::c_int,
        dx: *const ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ::libc::c_double;
    pub fn drot_(
        n: *const ::libc::c_int,
        dx: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
        dy: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
        c: *const ::libc::c_double,
        s: *const ::libc::c_double,
    ) -> ();
    pub fn drotg_(
        a: *const ::libc::c_double,
        b: *const ::libc::c_double,
        c: *mut ::libc::c_double,
        s: *mut ::libc::c_double,
    ) -> ();
    pub fn drotm_(
        n: *const ::libc::c_int,
        dx: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
        dy: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
        dparam: *const ::libc::c_double,
    ) -> ();
    pub fn drotmg_(
        dd1: *const ::libc::c_double,
        dd2: *const ::libc::c_double,
        dx1: *const ::libc::c_double,
        dy1: *const ::libc::c_double,
        param: *mut ::libc::c_double,
    ) -> ();
    pub fn dscal_(
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        dx: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ();
    pub fn dswap_(
        n: *const ::libc::c_int,
        dx: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
        dy: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
    ) -> ();
    pub fn idamax_(
        n: *const ::libc::c_int,
        dx: *const ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ::libc::c_int;
    pub fn dgbmv_(
        trans: *const ::libc::c_char,
        m: *const ::libc::c_int,
        n: *const ::libc::c_int,
        kl: *const ::libc::c_int,
        ku: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        beta: *const ::libc::c_double,
        y: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
    ) -> ();
    pub fn dgemv_(
        trans: *const ::libc::c_char,
        m: *const ::libc::c_int,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        beta: *const ::libc::c_double,
        y: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
    ) -> ();
    pub fn dsbmv_(
        uplo: *const ::libc::c_char,
        n: *const ::libc::c_int,
        k: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        beta: *const ::libc::c_double,
        y: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
    ) -> ();
    pub fn dspmv_(
        uplo: *const ::libc::c_char,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        ap: *const ::libc::c_double,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        beta: *const ::libc::c_double,
        y: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
    ) -> ();
    pub fn dsymv_(
        uplo: *const ::libc::c_char,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        beta: *const ::libc::c_double,
        y: *mut ::libc::c_double,
        incy: *const ::libc::c_int,
    ) -> ();
    pub fn dtbmv_(
        uplo: *const ::libc::c_char,
        trans: *const ::libc::c_char,
        diag: *const ::libc::c_char,
        n: *const ::libc::c_int,
        k: *const ::libc::c_int,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        x: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ();
    pub fn dtpmv_(
        uplo: *const ::libc::c_char,
        trans: *const ::libc::c_char,
        diag: *const ::libc::c_char,
        n: *const ::libc::c_int,
        ap: *const ::libc::c_double,
        x: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ();
    pub fn dtrmv_(
        uplo: *const ::libc::c_char,
        trans: *const ::libc::c_char,
        diag: *const ::libc::c_char,
        n: *const ::libc::c_int,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        x: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ();
    pub fn dtbsv_(
        uplo: *const ::libc::c_char,
        trans: *const ::libc::c_char,
        diag: *const ::libc::c_char,
        n: *const ::libc::c_int,
        k: *const ::libc::c_int,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        x: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ();
    pub fn dtpsv_(
        uplo: *const ::libc::c_char,
        trans: *const ::libc::c_char,
        diag: *const ::libc::c_char,
        n: *const ::libc::c_int,
        ap: *const ::libc::c_double,
        x: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ();
    pub fn dtrsv_(
        uplo: *const ::libc::c_char,
        trans: *const ::libc::c_char,
        diag: *const ::libc::c_char,
        n: *const ::libc::c_int,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        x: *mut ::libc::c_double,
        incx: *const ::libc::c_int,
    ) -> ();
    pub fn dger_(
        m: *const ::libc::c_int,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        y: *const ::libc::c_double,
        incy: *const ::libc::c_int,
        a: *mut ::libc::c_double,
        lda: *const ::libc::c_int,
    ) -> ();
    pub fn dsyr_(
        uplo: *const ::libc::c_char,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        a: *mut ::libc::c_double,
        lda: *const ::libc::c_int,
    ) -> ();
    pub fn dspr_(
        uplo: *const ::libc::c_char,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        ap: *mut ::libc::c_double,
    ) -> ();
    pub fn dsyr2_(
        uplo: *const ::libc::c_char,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        y: *const ::libc::c_double,
        incy: *const ::libc::c_int,
        a: *mut ::libc::c_double,
        lda: *const ::libc::c_int,
    ) -> ();
    pub fn dspr2_(
        uplo: *const ::libc::c_char,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        x: *const ::libc::c_double,
        incx: *const ::libc::c_int,
        y: *const ::libc::c_double,
        incy: *const ::libc::c_int,
        ap: *mut ::libc::c_double,
    ) -> ();
    pub fn dgemm_(
        transa: *const ::libc::c_char,
        transb: *const ::libc::c_char,
        m: *const ::libc::c_int,
        n: *const ::libc::c_int,
        k: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        b: *const ::libc::c_double,
        ldb: *const ::libc::c_int,
        beta: *const ::libc::c_double,
        c: *mut ::libc::c_double,
        ldc: *const ::libc::c_int,
    ) -> ();
    pub fn dtrsm_(
        side: *const ::libc::c_char,
        uplo: *const ::libc::c_char,
        transa: *const ::libc::c_char,
        diag: *const ::libc::c_char,
        m: *const ::libc::c_int,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        b: *mut ::libc::c_double,
        ldb: *const ::libc::c_int,
    ) -> ();
    pub fn dtrmm_(
        side: *const ::libc::c_char,
        uplo: *const ::libc::c_char,
        transa: *const ::libc::c_char,
        diag: *const ::libc::c_char,
        m: *const ::libc::c_int,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        b: *mut ::libc::c_double,
        ldb: *const ::libc::c_int,
    ) -> ();
    pub fn dsymm_(
        side: *const ::libc::c_char,
        uplo: *const ::libc::c_char,
        m: *const ::libc::c_int,
        n: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        b: *const ::libc::c_double,
        ldb: *const ::libc::c_int,
        beta: *const ::libc::c_double,
        c: *mut ::libc::c_double,
        ldc: *const ::libc::c_int,
    ) -> ();
    pub fn dsyrk_(
        uplo: *const ::libc::c_char,
        trans: *const ::libc::c_char,
        n: *const ::libc::c_int,
        k: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        beta: *const ::libc::c_double,
        c: *mut ::libc::c_double,
        ldc: *const ::libc::c_int,
    ) -> ();
    pub fn dsyr2k_(
        uplo: *const ::libc::c_char,
        trans: *const ::libc::c_char,
        n: *const ::libc::c_int,
        k: *const ::libc::c_int,
        alpha: *const ::libc::c_double,
        a: *const ::libc::c_double,
        lda: *const ::libc::c_int,
        b: *const ::libc::c_double,
        ldb: *const ::libc::c_int,
        beta: *const ::libc::c_double,
        c: *mut ::libc::c_double,
        ldc: *const ::libc::c_int,
    ) -> ();
    pub fn dcabs1_(z: *mut ::libc::c_double) -> ::libc::c_double;
    pub fn dzasum_(
        n: *mut ::libc::c_int,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ::libc::c_double;
    pub fn dznrm2_(
        n: *mut ::libc::c_int,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ::libc::c_double;
    pub fn izamax_(
        n: *mut ::libc::c_int,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ::libc::c_int;
    pub fn zaxpy_(
        n: *mut ::libc::c_int,
        za: *mut Rcomplex,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        zy: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> ();
    pub fn zcopy_(
        n: *mut ::libc::c_int,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        zy: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> ();
    pub fn zdotc_(
        n: *mut ::libc::c_int,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        zy: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> Rcomplex;
    pub fn zdotu_(
        n: *mut ::libc::c_int,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        zy: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> Rcomplex;
    pub fn zdrot_(
        n: *mut ::libc::c_int,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        zy: *mut Rcomplex,
        incy: *mut ::libc::c_int,
        c: *mut ::libc::c_double,
        s: *mut ::libc::c_double,
    ) -> ();
    pub fn zdscal_(
        n: *mut ::libc::c_int,
        da: *mut ::libc::c_double,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ();
    pub fn zgbmv_(
        trans: *mut ::libc::c_char,
        m: *mut ::libc::c_int,
        n: *mut ::libc::c_int,
        kl: *mut ::libc::c_int,
        ku: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        beta: *mut Rcomplex,
        y: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> ();
    pub fn zgemm_(
        transa: *const ::libc::c_char,
        transb: *const ::libc::c_char,
        m: *const ::libc::c_int,
        n: *const ::libc::c_int,
        k: *const ::libc::c_int,
        alpha: *const Rcomplex,
        a: *const Rcomplex,
        lda: *const ::libc::c_int,
        b: *const Rcomplex,
        ldb: *const ::libc::c_int,
        beta: *const Rcomplex,
        c: *mut Rcomplex,
        ldc: *const ::libc::c_int,
    ) -> ();
    pub fn zgemv_(
        trans: *mut ::libc::c_char,
        m: *mut ::libc::c_int,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        beta: *mut Rcomplex,
        y: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> ();
    pub fn zgerc_(
        m: *mut ::libc::c_int,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        y: *mut Rcomplex,
        incy: *mut ::libc::c_int,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
    ) -> ();
    pub fn zgeru_(
        m: *mut ::libc::c_int,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        y: *mut Rcomplex,
        incy: *mut ::libc::c_int,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
    ) -> ();
    pub fn zhbmv_(
        uplo: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        k: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        beta: *mut Rcomplex,
        y: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> ();
    pub fn zhemm_(
        side: *mut ::libc::c_char,
        uplo: *mut ::libc::c_char,
        m: *mut ::libc::c_int,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        b: *mut Rcomplex,
        ldb: *mut ::libc::c_int,
        beta: *mut Rcomplex,
        c: *mut Rcomplex,
        ldc: *mut ::libc::c_int,
    ) -> ();
    pub fn zhemv_(
        uplo: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        beta: *mut Rcomplex,
        y: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> ();
    pub fn zher_(
        uplo: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        alpha: *mut ::libc::c_double,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
    ) -> ();
    pub fn zher2_(
        uplo: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        y: *mut Rcomplex,
        incy: *mut ::libc::c_int,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
    ) -> ();
    pub fn zher2k_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        k: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        b: *mut Rcomplex,
        ldb: *mut ::libc::c_int,
        beta: *mut ::libc::c_double,
        c: *mut Rcomplex,
        ldc: *mut ::libc::c_int,
    ) -> ();
    pub fn zherk_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        k: *mut ::libc::c_int,
        alpha: *mut ::libc::c_double,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        beta: *mut ::libc::c_double,
        c: *mut Rcomplex,
        ldc: *mut ::libc::c_int,
    ) -> ();
    pub fn zhpmv_(
        uplo: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        ap: *mut Rcomplex,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        beta: *mut Rcomplex,
        y: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> ();
    pub fn zhpr_(
        uplo: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        alpha: *mut ::libc::c_double,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        ap: *mut Rcomplex,
    ) -> ();
    pub fn zhpr2_(
        uplo: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        y: *mut Rcomplex,
        incy: *mut ::libc::c_int,
        ap: *mut Rcomplex,
    ) -> ();
    pub fn zrotg_(
        ca: *mut Rcomplex,
        cb: *mut Rcomplex,
        c: *mut ::libc::c_double,
        s: *mut Rcomplex,
    ) -> ();
    pub fn zscal_(
        n: *mut ::libc::c_int,
        za: *mut Rcomplex,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ();
    pub fn zswap_(
        n: *mut ::libc::c_int,
        zx: *mut Rcomplex,
        incx: *mut ::libc::c_int,
        zy: *mut Rcomplex,
        incy: *mut ::libc::c_int,
    ) -> ();
    pub fn zsymm_(
        side: *mut ::libc::c_char,
        uplo: *mut ::libc::c_char,
        m: *mut ::libc::c_int,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        b: *mut Rcomplex,
        ldb: *mut ::libc::c_int,
        beta: *mut Rcomplex,
        c: *mut Rcomplex,
        ldc: *mut ::libc::c_int,
    ) -> ();
    pub fn zsyr2k_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        k: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        b: *mut Rcomplex,
        ldb: *mut ::libc::c_int,
        beta: *mut Rcomplex,
        c: *mut Rcomplex,
        ldc: *mut ::libc::c_int,
    ) -> ();
    pub fn zsyrk_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        k: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        beta: *mut Rcomplex,
        c: *mut Rcomplex,
        ldc: *mut ::libc::c_int,
    ) -> ();
    pub fn ztbmv_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        diag: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        k: *mut ::libc::c_int,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ();
    pub fn ztbsv_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        diag: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        k: *mut ::libc::c_int,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ();
    pub fn ztpmv_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        diag: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        ap: *mut Rcomplex,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ();
    pub fn ztpsv_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        diag: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        ap: *mut Rcomplex,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ();
    pub fn ztrmm_(
        side: *mut ::libc::c_char,
        uplo: *mut ::libc::c_char,
        transa: *mut ::libc::c_char,
        diag: *mut ::libc::c_char,
        m: *mut ::libc::c_int,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        b: *mut Rcomplex,
        ldb: *mut ::libc::c_int,
    ) -> ();
    pub fn ztrmv_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        diag: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ();
    pub fn ztrsm_(
        side: *mut ::libc::c_char,
        uplo: *mut ::libc::c_char,
        transa: *mut ::libc::c_char,
        diag: *mut ::libc::c_char,
        m: *mut ::libc::c_int,
        n: *mut ::libc::c_int,
        alpha: *mut Rcomplex,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        b: *mut Rcomplex,
        ldb: *mut ::libc::c_int,
    ) -> ();
    pub fn ztrsv_(
        uplo: *mut ::libc::c_char,
        trans: *mut ::libc::c_char,
        diag: *mut ::libc::c_char,
        n: *mut ::libc::c_int,
        a: *mut Rcomplex,
        lda: *mut ::libc::c_int,
        x: *mut Rcomplex,
        incx: *mut ::libc::c_int,
    ) -> ();
}

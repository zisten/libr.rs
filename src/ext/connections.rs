// automatically generated by rust-bindgen
use libc::size_t;
use super::boolean::*;
use super::super::internals::SEXP;
use super::super::va_list::va_list;

pub type Rconnection = *mut Struct_Rconn;
#[repr(C)]
#[derive(Copy)]
#[allow(non_snake_case)]
pub struct Struct_Rconn {
    pub class: *mut ::libc::c_char,
    pub description: *mut ::libc::c_char,
    pub enc: ::libc::c_int,
    pub mode: [::libc::c_char; 5usize],
    pub text: Rboolean,
    pub isopen: Rboolean,
    pub incomplete: Rboolean,
    pub canread: Rboolean,
    pub canwrite: Rboolean,
    pub canseek: Rboolean,
    pub blocking: Rboolean,
    pub isGzcon: Rboolean,
    pub open: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Struct_Rconn) -> Rboolean>,
    pub close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Struct_Rconn) -> ()>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Struct_Rconn) -> ()>,
    pub vfprintf: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut Struct_Rconn, arg2: *const ::libc::c_char, arg3: va_list)
            -> ::libc::c_int,
    >,
    pub fgetc:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut Struct_Rconn) -> ::libc::c_int>,
    pub fgetc_internal:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut Struct_Rconn) -> ::libc::c_int>,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Struct_Rconn,
            arg2: ::libc::c_double,
            arg3: ::libc::c_int,
            arg4: ::libc::c_int,
        ) -> ::libc::c_double,
    >,
    pub truncate: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Struct_Rconn) -> ()>,
    pub fflush:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut Struct_Rconn) -> ::libc::c_int>,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::libc::c_void,
            arg2: size_t,
            arg3: size_t,
            arg4: *mut Struct_Rconn,
        ) -> size_t,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::libc::c_void,
            arg2: size_t,
            arg3: size_t,
            arg4: *mut Struct_Rconn,
        ) -> size_t,
    >,
    pub nPushBack: ::libc::c_int,
    pub posPushBack: ::libc::c_int,
    pub PushBack: *mut *mut ::libc::c_char,
    pub save: ::libc::c_int,
    pub save2: ::libc::c_int,
    pub encname: [::libc::c_char; 101usize],
    pub inconv: *mut ::libc::c_void,
    pub outconv: *mut ::libc::c_void,
    pub iconvbuff: [::libc::c_char; 25usize],
    pub oconvbuff: [::libc::c_char; 50usize],
    pub next: *mut ::libc::c_char,
    pub init_out: [::libc::c_char; 25usize],
    pub navail: ::libc::c_short,
    pub inavail: ::libc::c_short,
    pub EOF_signalled: Rboolean,
    pub UTF8out: Rboolean,
    pub id: *mut ::libc::c_void,
    pub ex_ptr: *mut ::libc::c_void,
    pub private: *mut ::libc::c_void,
    pub status: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Rconn {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Rconn {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}

extern "C" {
    pub fn R_new_custom_connection(
        description: *const ::libc::c_char,
        mode: *const ::libc::c_char,
        class_name: *const ::libc::c_char,
        ptr: *mut Rconnection,
    ) -> SEXP;
    pub fn R_ReadConnection(con: Rconnection, buf: *mut ::libc::c_void, n: size_t) -> size_t;
    pub fn R_WriteConnection(con: Rconnection, buf: *mut ::libc::c_void, n: size_t) -> size_t;
}
